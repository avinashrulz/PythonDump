if x < 5:
    print("Number is less than 5")
elif x = 5:
    print("Number is equal to 5")
else:
    print("Number is more than 5")


while true:
    if n<5:
        break
    else:
        continue


for n in range(0, 10, 2):
    print(n)
0
2
4
6
8


import random
random.randInt(11, 20)


Don't override module names.

By using expressions that evaluate to True or False (also called conditions),
you can write programs that make decisions on what code to execute and
what code to skip.


round() and abs()???


function in python:
fnuction is like a mini program within a program.
Arguments - The values that we pass to functions while making a function call.
Parameters - The variables that store or contain arguments.
Note: Value stored in a parameter is forgotten once the function returns.

Quick Description:

def sayHello(name):
    print('Hello, ' + name)
sayHello('Al')


To define a function is to create it, just like an assignment statement like
spam = 42 creates the spam variable. The def statement defines the sayHello()
function . The sayHello('Al') line  calls the now-created function, sending
the execution to the top of the function’s code. This function call is
also known as passing the string value 'Al' to the function. A value being
passed to a function in a function call is an argument. The argument 'Al'
is assigned to a local variable named name. Variables that have arguments
assigned to them are parameters.
It’s easy to mix up these terms, but keeping them straight will ensure
that you know precisely what the text in this chapter means.

In general, the value that a function call evaluates to is
called the return value of the function.
you can pass return values as an argument to another
function call.

The None Value (Null)
The None value is the only value of the NoneType data type.

Since all function calls need to evaluate to a return value, print() returns None.

Behind the scenes, Python adds return None to the end of any function
definition with no return statement. This is similar to how a while or for
loop implicitly ends with a continue statement. 
Also, if you use a return statement
without a value (that is, just the return keyword by itself), then None
is returned.


Most arguments are identified by their position in the function call. For
example, random.randint(1, 10) is different from random.randint(10, 1). The
function call random.randint(1, 10) will return a random integer between 1
and 10 because the first argument is the low end of the range and the second
argument is the high end (while random.randint(10, 1) causes an error).

some functions have optional keyword
arguments that can be specified when the function is called. Like for the print() function,
end and sep are two keyword arguments.


Meandering conversation and function call - Works like a stack, called the call stack.

Python manages call stack behind the scenes by creating a frame object and adding it
at the top of the call stack when ever a function call is made to remember the line 
number of the original function call so that Python can remember where to return.

A variable can either be local or global in scope, not both.
Think of a scope as a container for variables. When a scope is destroyed,
all the values stored in the scope’s variables are forgotten. 

Global Scope - There is only one global scope, and it is created when your program begins. 
When your program terminates, the global scope is destroyed, and all its variables are
forgotten.

Local Scope - A local scope is created whenever a function is called. Any variables
assigned in the function exist within the function’s local scope. When
the function returns, the local scope is destroyed, and these variables are
forgotten. The next time you call the function, the local variables will not
remember the values stored in them from the last time the function was
called. Local variables are also stored in frame objects on the call stack.

Scopes matter for several reasons:
• Code in the global scope, outside of all functions, cannot use any
local variables.
• However, code in a local scope can access global variables.
• Code in a function’s local scope cannot use variables in any other
local scope.
• You can use the same name for different variables if they are in different
scopes. That is, there can be a local variable named spam and
a global variable also named spam.


when the program execution is in the global scope, no local scopes
exist, so there can’t be any local variables. This is why only global variables
can be used in the global scope.


The upshot is that local variables in one function are completely separate
from the local variables in another function.


If you need to modify a global variable from within a function, use the
global statement. If you have a line such as global eggs at the top of a function,
it tells Python, “In this function, eggs refers to the global variable, so
don’t create a local variable with this name.”


There are four rules to tell whether a variable is in a local scope or
global scope:
• If a variable is being used in the global scope (that is, outside of all
functions), then it is always a global variable.
• If there is a global statement for that variable in a function, it is a
global variable.
• Otherwise, if the variable is used in an assignment statement in the
function, it is a local variable.
• But if the variable is not used in an assignment statement, it is a
global variable.

If you ever want to modify the value stored in a global variable from in a function,
you must use a global statement on that variable.

function as black box:
Often, all you need to know about a function are its inputs (the parameters)
and output value;

Errors can be handled with try and except statements. The code that
could potentially have an error is put in a try clause. The program execution
moves to the start of a following except clause if an error happens.

A list is a value that contains multiple values in an ordered sequence. The
term list value refers to the list itself (which is a value that can be stored in a
variable or passed to a function like any other value), not the values inside
the list value.

Item - Individual values in a list are called items. Index is the integere value that 
is used to access any item in a list.
Python will give you an IndexError error message if you use an index
that exceeds the number of values in your list value.


While indexes start at 0 and go up, you can also use negative integers for
the index. The integer value -1 refers to the last index in a list, the value -2
refers to the second-to-last index in a list, and so on.


Just as an index can get a single value from a list, a slice can get several
values from a list, in the form of a new list. slice is typed between square
brackets, like an index, but it has two integers separated by a colon.
In a slice, the first integer is the index where the slice starts. The second
integer is the index where the slice ends. A slice goes up to, but will
not include, the value at the second index. A slice evaluates to a new list
value.
As a shortcut, you can leave out one or both of the indexes on either
side of the colon in the slice. Leaving out the first index is the same as using
0, or the beginning of the list. Leaving out the second index is the same as
using the length of the list, which will slice to the end of the list.


Lists:
The term list value refers to the list itself (which is a value that can be stored in a
variable or passed to a function like any other value), not the values inside
the list value.
Values inside the list are also called
items. Items are separated with commas (that is, they are comma-delimited).

Just as an index can get a single value from a list, a slice can get several
values from a list, in the form of a new list. A slice is typed between square
brackets, like an index, but it has two integers separated by a colon.

A) In a slice, the first integer is the index where the slice starts. The second
integer is the index where the slice ends. A slice goes up to, but will
not include, the value at the second index. A slice evaluates to a new list
value.
B) As a shortcut, you can leave out one or both of the indexes on either
side of the colon in the slice. Leaving out the first index is the same as using
0, or the beginning of the list. Leaving out the second index is the same as
using the length of the list, which will slice to the end of the list.

Lists can be concatenated and replicated just like strings. The + operator
combines two lists to create a new list value and the * operator can be used
with a list and an integer value to replicate the list.